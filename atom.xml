<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谎话兔博客</title>
  
  <subtitle>LieRabbit</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lierabbit.cn/"/>
  <updated>2018-08-25T08:16:40.812Z</updated>
  <id>https://lierabbit.cn/</id>
  
  <author>
    <name>谎话兔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机01</title>
    <link href="https://lierabbit.cn/2018/02/25/%E9%9A%8F%E6%9C%BA01/"/>
    <id>https://lierabbit.cn/2018/02/25/随机01/</id>
    <published>2018-02-25T05:14:39.000Z</published>
    <updated>2018-08-25T08:16:40.812Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个以p概率产生0，以1-p概率产生1的随机函数RandomP::f()，p是固定的值，但你并不知道是多少。除此之外也不能使用任何额外的随机机制，请用RandomP::f()实现等概率随机产生0和1的随机函数。</p><p>思路：</p><ul><li>f()产生0的概率P，产生1的概率1-P</li><li>产生01和10序列的概率都为P * (1-P )</li><li>不断调用f(),直到能够产生01或10，序列终止。</li><li>如果产生了01，返回0。</li><li>如果产生了10，则返回1,即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> p = <span class="keyword">new</span> Random().nextFloat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机概率p</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Random().nextFloat() &lt; p ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">random01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过f函数实现01等概率返回</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        a = f();</span><br><span class="line">        b = f();</span><br><span class="line">        <span class="keyword">if</span> (a != b)</span><br><span class="line">            <span class="keyword">return</span> a &gt; b ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个以p概率产生0，以1-p概率产生1的随机函数RandomP::f()，p是固定的值，但你并不知道是多少。除此之外也不能使用任何额外的随机机制，请用RandomP::f()实现等概率随机产生0和1的随机函数。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f()产生
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>随机函数</title>
    <link href="https://lierabbit.cn/2018/02/25/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/"/>
    <id>https://lierabbit.cn/2018/02/25/随机函数/</id>
    <published>2018-02-25T05:02:24.000Z</published>
    <updated>2018-08-25T08:11:21.765Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个等概率随机产生1~5的随机函数，除此之外，不能使用任何额外的随机机制，请实现等概率随机产生1~7的随机函数。(给定一个可调用的Random5::random()方法,可以等概率地随机产生1～5的随机函数)</p><p>思路：得到一串均匀分布且长度大于7的连续序列即可（甚至都不需要连续，只要保证能产生7个以上等概率的数即可），在这个序列里选中7个（或7的倍数个），若得到的数不是这7个中的，重新产生，这样这7个数的概率肯定是相同的。<br>步骤：<br>1.已经有等概率随机产生1、2、3、4、5的随机函数。<br>2.根据步骤1得到的结果减1，将得到f( ) -&gt; 0、1、2、3、4<br>3.f( )x5 -&gt; 0、5、10、15、20<br>4.f( )x5+f () -&gt; 0、1、2、3、4…..24 <code>注意这两个f( )是分别调用的，不要化简。</code><br>5.如果步骤4产生的数大于20，则重复进行步骤4直到产生的结果在0~20之间。<br>6.步骤5的结果将等概率随机产生0~20，所以步骤5的结果%7之后等概率产生0~6。<br>7.步骤6的结果加1，将等概率产生1~7。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机产生[1,5]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rand5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + rand.nextInt(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过rand5实现rand7</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">randomNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = (rand5() - <span class="number">1</span>) * <span class="number">5</span> + rand5() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (value &gt; <span class="number">20</span>)</span><br><span class="line">        value = (rand5() - <span class="number">1</span>) * <span class="number">5</span> + rand5() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个等概率随机产生1~5的随机函数，除此之外，不能使用任何额外的随机机制，请实现等概率随机产生1~7的随机函数。(给定一个可调用的Random5::random()方法,可以等概率地随机产生1～5的随机函数)&lt;/p&gt;
&lt;p&gt;思路：得到一串均匀分布且长度大于7的连续序列即
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁</title>
    <link href="https://lierabbit.cn/2018/02/25/%E8%9A%82%E8%9A%81/"/>
    <id>https://lierabbit.cn/2018/02/25/蚂蚁/</id>
    <published>2018-02-25T03:13:03.000Z</published>
    <updated>2018-08-25T07:48:33.014Z</updated>
    
    <content type="html"><![CDATA[<p>n只蚂蚁从正n边形的n个定点沿着边移动，速度是相同的，问它们碰头的概率是多少？<br>给定一个正整数n，请返回一个数组，其中两个元素分别为结果的分子和分母，请化为最简分数。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">返回：[3,4]</span><br></pre></td></tr></table></figure><p>思路：如果蚂蚁移动方向不都相同，则必定碰头。只有全部顺时针或者逆时针方向移动才不会碰头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] collision(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> all = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> g = gcd(all, all - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    res[<span class="number">0</span>] = (all - <span class="number">2</span>) / g;</span><br><span class="line">    res[<span class="number">1</span>] = all / g;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">        temp = y;</span><br><span class="line">        y = x % y;</span><br><span class="line">        x = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n只蚂蚁从正n边形的n个定点沿着边移动，速度是相同的，问它们碰头的概率是多少？&lt;br&gt;给定一个正整数n，请返回一个数组，其中两个元素分别为结果的分子和分母，请化为最简分数。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>足球比赛</title>
    <link href="https://lierabbit.cn/2018/02/24/%E8%B6%B3%E7%90%83%E6%AF%94%E8%B5%9B/"/>
    <id>https://lierabbit.cn/2018/02/24/足球比赛/</id>
    <published>2018-02-24T04:24:20.000Z</published>
    <updated>2018-08-25T07:47:26.554Z</updated>
    
    <content type="html"><![CDATA[<p>有2k只球队，有k-1个强队，其余都是弱队，随机把它们分成k组比赛，每组两个队，问两强相遇的概率是多大？<br>给定一个数k，请返回一个数组，其中有两个元素，分别为最终结果的分子和分母，请化成最简分数<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">返回：[3,7]</span><br></pre></td></tr></table></figure><p>思路：<br>1.求出全部分组情况<br>2.求出两强不相遇的情况<br>3.全部分组-两强不相遇=两强相遇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] calc(<span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> all = <span class="number">1</span>; <span class="comment">// 分组全部情况</span></span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="number">2</span> * k;</span><br><span class="line">    <span class="keyword">while</span> (k2 != <span class="number">0</span>) &#123;</span><br><span class="line">        all *= k2 - <span class="number">1</span>;</span><br><span class="line">        k2 -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> noTowStrong = C(k + <span class="number">1</span>, k - <span class="number">1</span>) * A(k - <span class="number">1</span>, k - <span class="number">1</span>); <span class="comment">// 两强不相遇的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    res[<span class="number">0</span>] = all - noTowStrong;</span><br><span class="line">    res[<span class="number">1</span>] = all;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> g = gcd(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    res[<span class="number">0</span>] /= g;</span><br><span class="line">    res[<span class="number">1</span>] /= g;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = y;</span><br><span class="line">        y = x % y;</span><br><span class="line">        x = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有2k只球队，有k-1个强队，其余都是弱队，随机把它们分成k组比赛，每组两个队，问两强相遇的概率是多大？&lt;br&gt;给定一个数k，请返回一个数组，其中有两个元素，分别为最终结果的分子和分母，请化成最简分数&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>错装信封</title>
    <link href="https://lierabbit.cn/2018/02/24/%E9%94%99%E8%A3%85%E4%BF%A1%E5%B0%81/"/>
    <id>https://lierabbit.cn/2018/02/24/错装信封/</id>
    <published>2018-02-24T03:46:24.000Z</published>
    <updated>2018-08-25T07:42:57.311Z</updated>
    
    <content type="html"><![CDATA[<p>有n个信封，包含n封信，现在把信拿出来，再装回去，要求每封信不能装回它原来的信封，问有多少种装法?<br>给定一个整数n，请返回装发个数，为了防止溢出，请返回结果Mod 1000000007的值。保证n的大小小于等于300。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><p>思路：<br>对于n封信按照题目要求的装法即为f(n)<br>假设第n封信放入了第i个信封<br>情况一:第i封信也放入了第n个信封中，后续为f(n-2)<br>情况二:第i封信没放入了第n个信封中，后续为f(n-1)<br>n封信放入i个信封，i的选择有(n-1)种<br>所以总数为f(n)= (n-1)*(f(n-1)+f(n-2))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, last = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) (i - <span class="number">1</span>) * (<span class="keyword">long</span>) (pre + last) % <span class="number">1000000007</span>);</span><br><span class="line">            pre = last;</span><br><span class="line">            last = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有n个信封，包含n封信，现在把信拿出来，再装回去，要求每封信不能装回它原来的信封，问有多少种装法?&lt;br&gt;给定一个整数n，请返回装发个数，为了防止溢出，请返回结果Mod 1000000007的值。保证n的大小小于等于300。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>高矮排列</title>
    <link href="https://lierabbit.cn/2018/02/24/%E9%AB%98%E7%9F%AE%E6%8E%92%E5%88%97/"/>
    <id>https://lierabbit.cn/2018/02/24/高矮排列/</id>
    <published>2018-02-24T02:34:11.000Z</published>
    <updated>2018-08-25T07:39:29.781Z</updated>
    
    <content type="html"><![CDATA[<p>12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的第一排的人高，问排列方式有多少种？</p><p>给定一个偶数n，请返回所求的排列方式个数。保证结果在int范围内。</p><p>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><p>思路：同<a href="https://lierabbit.cn/2018/08/25/进出栈/">进出栈</a><br><img src="https://blog-1252204470.cos.ap-guangzhou.myqcloud.com/2018/02/24/%E9%AB%98%E7%9F%AE%E6%8E%92%E5%88%97/1.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> C(n, n / <span class="number">2</span>) / (n / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的第一排的人高，问排列方式有多少种？&lt;/p&gt;
&lt;p&gt;给定一个偶数n，请返回所求的排列方式个数。保证结果在int范围内。&lt;/p&gt;
&lt;p&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树统计</title>
    <link href="https://lierabbit.cn/2018/02/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%9F%E8%AE%A1/"/>
    <id>https://lierabbit.cn/2018/02/24/二叉树统计/</id>
    <published>2018-02-24T02:24:22.000Z</published>
    <updated>2018-08-25T07:36:25.056Z</updated>
    
    <content type="html"><![CDATA[<p>求n个无差别的节点构成的二叉树有多少种不同的结构？<br>给定一个整数n，请返回不同结构的二叉树的个数。保证结果在int范围内。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><p>思路：<br>假设n个无差别的节点构成不同的结构数为f(n)<br>f(0)表示空树，所以规定种数为1种。<br>以1节点为头时，结构数为1<em>f(n-1).<br>以2节点为头时，结构数为1</em>f(n-2).<br>以3节点为头时，结构数为f(2)<em>f(n-3).<br>以4节点为头时，结构数为f(3)</em>f(n-4).<br>以5节点为头时，结构数为f(4)<em>f(n-5).<br>。。。。。。。。。。。。。。。。<br>假设n个无差别的节点构成不同的结构数为f(n)<br>f(0)=1,f(1)=1,f(2)=2,f(3)=5时<br>f(n)=f(0)</em>f(n-1)+f(1)<em>f(n-2)+f(3)</em>f(n-4)+……..+ ……..+f(n-1)*f(0)=C(2n,n)/n+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C(<span class="number">2</span> * n, n) / (n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;求n个无差别的节点构成的二叉树有多少种不同的结构？&lt;br&gt;给定一个整数n，请返回不同结构的二叉树的个数。保证结果在int范围内。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排队买票</title>
    <link href="https://lierabbit.cn/2018/02/24/%E6%8E%92%E9%98%9F%E4%B9%B0%E7%A5%A8/"/>
    <id>https://lierabbit.cn/2018/02/24/排队买票/</id>
    <published>2018-02-24T02:00:11.000Z</published>
    <updated>2018-08-25T07:33:26.515Z</updated>
    
    <content type="html"><![CDATA[<p>2n个人排队买票，n个人拿5块钱，n个人拿10块钱，票价是5块钱1张，每个人买一张票，售票员手里没有零钱，问有多少种排队方法让售票员可以顺利卖票。<br>给定一个整数n，请返回所求的排队方案个数。保证结果在int范围内。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><p>思路：同<a href="https://lierabbit.cn/2018/08/25/进出栈/">进出栈</a>，将持5元者到达视作将5元入栈，持10元者到达视作使栈中某5元出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C(<span class="number">2</span> * n, n) / (n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2n个人排队买票，n个人拿5块钱，n个人拿10块钱，票价是5块钱1张，每个人买一张票，售票员手里没有零钱，问有多少种排队方法让售票员可以顺利卖票。&lt;br&gt;给定一个整数n，请返回所求的排队方案个数。保证结果在int范围内。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>括号序列</title>
    <link href="https://lierabbit.cn/2018/02/24/%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/"/>
    <id>https://lierabbit.cn/2018/02/24/括号序列/</id>
    <published>2018-02-24T01:19:10.000Z</published>
    <updated>2018-08-25T07:30:59.912Z</updated>
    
    <content type="html"><![CDATA[<p>假设有n对左右括号，请求出合法的排列有多少个？合法是指每一个括号都可以找到与之配对的括号，比如n=1时，()是合法的，但是)(为不合法。<br>给定一个整数n，请返回所求的合法排列数。保证结果在int范围内。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><p>思路：同<a href="https://lierabbit.cn/2018/08/25/进出栈/">进出栈</a>，只需将左括号看成进栈，右括号看成出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countLegalWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C(<span class="number">2</span> * n, n) / (n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设有n对左右括号，请求出合法的排列有多少个？合法是指每一个括号都可以找到与之配对的括号，比如n=1时，()是合法的，但是)(为不合法。&lt;br&gt;给定一个整数n，请返回所求的合法排列数。保证结果在int范围内。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>进出栈</title>
    <link href="https://lierabbit.cn/2018/02/24/%E8%BF%9B%E5%87%BA%E6%A0%88/"/>
    <id>https://lierabbit.cn/2018/02/24/进出栈/</id>
    <published>2018-02-24T00:35:15.000Z</published>
    <updated>2018-08-25T07:34:53.710Z</updated>
    
    <content type="html"><![CDATA[<p>n个数进出栈的顺序有多少种？假设栈的容量无限大。<br>给定一个整数n，请返回所求的进出栈顺序个数。保证结果在int范围内。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">返回：1</span><br></pre></td></tr></table></figure><h3 id="常规分析："><a href="#常规分析：" class="headerlink" title="常规分析："></a>常规分析：</h3><p>首先，我们设f（n）=序列个数为n的出栈序列种数。（我们假定，最后出栈的元素为k，显然，k取不同值时的情况是相互独立的，也就是求出每种k最后出栈的情况数后可用加法原则，由于k最后出栈，因此，在k入栈之前，比k小的值均出栈，此处情况有f(k-1)种，而之后比k大的值入栈，且都在k之前出栈，因此有f(n-k)种方式，由于比k小和比k大的值入栈出栈情况是相互独立的，此处可用乘法原则，f(n-k)*f(k-1)种，求和便是Catalan递归式）<br>首次出空之前第一个出栈的序数k将1~n的序列分成两个序列，其中一个是1~k-1，序列个数为k-1，另外一个是k+1~n，序列个数是n-k。<br>此时，我们若把k视为确定一个序数，那么根据乘法原理，f（n）的问题就等价于——序列个数为k-1的出栈序列种数乘以序列个数为n - k的出栈序列种数，即选择k这个序数的f（n）=f（k-1）×f（n-k）。而k可以选1到n，所以再根据加法原理，将k取不同值的序列种数相加，得到的总序列种数为：f（n）=f（0）f（n-1）+f（1）f（n-2）+……+f（n-1）f（0）。<br>看到此处，再看看卡特兰数的递推式，答案不言而喻，即为f（n）=h（n）= C（2n,n）/（n+1）= c（2n,n）-c（2n,n-1）（n=0，1，2，……）。<br>最后，令f（0）=1，f（1）=1。</p><h3 id="非常规分析："><a href="#非常规分析：" class="headerlink" title="非常规分析："></a>非常规分析：</h3><p>对于每一个数来说，必须进栈一次、出栈一次。我们把进栈设为状态‘1’，出栈设为状态‘0’。n个数的所有状态对应n个1和n个0组成的2n位二进制数。由于等待入栈的操作数按照1‥n的顺序排列、入栈的操作数b大于等于出栈的操作数a(a≤b)，因此输出序列的总数目=由左而右扫描由n个1和n个0组成的2n位二进制数，1的累计数不小于0的累计数的方案种数。<br>在2n位二进制数中填入n个1的方案数为c(2n,n),不填1的其余n位自动填0。从中减去不符合要求（由左而右扫描，0的累计数大于1的累计数）的方案数即为所求。<br>不符合要求的数的特征是由左而右扫描时，必然在某一奇数位2m+1位上首先出现m+1个0的累计数和m个1的累计数，此后的2(n-m)-1位上有n-m个 1和n-m-1个0。如若把后面这2(n-m)-1位上的0和1互换，使之成为n-m个0和n-m-1个1，结果得1个由n+1个0和n-1个1组成的2n位数，即一个不合要求的数对应于一个由n+1个0和n-1个1组成的排列。<br>反过来，任何一个由n+1个0和n-1个1组成的2n位二进制数，由于0的个数多2个，2n为偶数，故必在某一个奇数位上出现0的累计数超过1的累计数。同样在后面部分0和1互换，使之成为由n个0和n个1组成的2n位数，即n+1个0和n-1个1组成的2n位数必对应一个不符合要求的数。<br>因而不合要求的2n位数与n+1个0，n－1个1组成的排列一一对应。<br>显然，不符合要求的方案数为c(2n,n+1)。由此得出输出序列的总数目=c(2n,n)-c(2n,n+1)=c(2n,n)/(n+1)=h(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> C(<span class="number">2</span> * n, n) / (n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n个数进出栈的顺序有多少种？假设栈的容量无限大。&lt;br&gt;给定一个整数n，请返回所求的进出栈顺序个数。保证结果在int范围内。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分糖果</title>
    <link href="https://lierabbit.cn/2018/02/23/%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <id>https://lierabbit.cn/2018/02/23/分糖果/</id>
    <published>2018-02-23T13:18:04.000Z</published>
    <updated>2018-08-25T07:21:48.909Z</updated>
    
    <content type="html"><![CDATA[<p>n颗相同的糖果，分给m个人，每人至少一颗，问有多少种分法。<br>给定n和m，请返回方案数，保证n小于等于12，且m小于等于n。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10,3</span><br><span class="line">返回：36</span><br></pre></td></tr></table></figure><p>思路：如果有10颗，要分给3个人，则相当于在10颗糖中插入两个挡板，分出三个部分，则C(9，2) = 36种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWays</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C(n - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n颗相同的糖果，分给m个人，每人至少一颗，问有多少种分法。&lt;br&gt;给定n和m，请返回方案数，保证n小于等于12，且m小于等于n。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>孤傲的A</title>
    <link href="https://lierabbit.cn/2018/02/23/%E5%AD%A4%E5%82%B2%E7%9A%84A/"/>
    <id>https://lierabbit.cn/2018/02/23/孤傲的A/</id>
    <published>2018-02-23T13:09:07.000Z</published>
    <updated>2018-08-25T07:16:45.859Z</updated>
    
    <content type="html"><![CDATA[<p>A(A也是他的编号)是一个孤傲的人，在一个n个人(其中编号依次为1到n)的队列中，他于其中的标号为b和标号c的人都有矛盾，所以他不会和他们站在相邻的位置。现在问你满足A的要求的对列有多少种？<br>给定人数n和三个人的标号A,b和c，请返回所求答案，保证人数小于等于11且大于等于3。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6,1,2,3</span><br><span class="line">288</span><br></pre></td></tr></table></figure><p>思路：<br>1.统计全排列情况<br>2.统计ab，ac相邻的情况<br>3.因为ab，ac相邻包含了bac，cab，所以要统计bac，cab的情况<br>4.全排列-ab-ac+bac+cab即为结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWays</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> ab = A(n - <span class="number">1</span>, n - <span class="number">1</span>) * <span class="number">2</span>; <span class="comment">// ab相邻的情况分为ab,ba两种</span></span><br><span class="line">    <span class="keyword">int</span> bac = A(n - <span class="number">2</span>, n - <span class="number">2</span>) * <span class="number">2</span>; <span class="comment">// bac相邻的情况有bac,cab两种</span></span><br><span class="line">    <span class="keyword">int</span> all = A(n, n); <span class="comment">// 全排列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all - ab * <span class="number">2</span> + bac; <span class="comment">// ac与ab一致所以ab*2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A(A也是他的编号)是一个孤傲的人，在一个n个人(其中编号依次为1到n)的队列中，他于其中的标号为b和标号c的人都有矛盾，所以他不会和他们站在相邻的位置。现在问你满足A的要求的对列有多少种？&lt;br&gt;给定人数n和三个人的标号A,b和c，请返回所求答案，保证人数小于等于11且大
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>站队问题</title>
    <link href="https://lierabbit.cn/2018/02/23/%E7%AB%99%E9%98%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://lierabbit.cn/2018/02/23/站队问题/</id>
    <published>2018-02-23T12:26:32.000Z</published>
    <updated>2018-08-25T07:13:27.388Z</updated>
    
    <content type="html"><![CDATA[<p>n个人站队，他们的编号依次从1到n，要求编号为a的人必须在编号为b的人的左边，但不要求一定相邻，请问共有多少种排法？第二问如果要求a必须在b的左边，并且一定要相邻，请问一共有多少种排法？<br>给定人数n及两个人的编号a和b，请返回一个两个元素的数组，其中两个元素依次为两个问题的答案。保证人数小于等于10。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7,1,2</span><br><span class="line">返回：[2520,720]</span><br></pre></td></tr></table></figure><p>思路：<br><img src="https://blog-1252204470.cos.ap-guangzhou.myqcloud.com/2018/02/23/%E7%AB%99%E9%98%9F%E9%97%AE%E9%A2%98/1.jpg" alt=""><br><img src="https://blog-1252204470.cos.ap-guangzhou.myqcloud.com/2018/02/23/%E7%AB%99%E9%98%9F%E9%97%AE%E9%A2%98/2.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getWays(<span class="keyword">int</span> n, <span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    res[<span class="number">0</span>] = A(n, n) / <span class="number">2</span>;</span><br><span class="line">    res[<span class="number">1</span>] = A(n - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n个人站队，他们的编号依次从1到n，要求编号为a的人必须在编号为b的人的左边，但不要求一定相邻，请问共有多少种排法？第二问如果要求a必须在b的左边，并且一定要相邻，请问一共有多少种排法？&lt;br&gt;给定人数n及两个人的编号a和b，请返回一个两个元素的数组，其中两个元素依次为两个
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>方格移动</title>
    <link href="https://lierabbit.cn/2018/02/23/%E6%96%B9%E6%A0%BC%E7%A7%BB%E5%8A%A8/"/>
    <id>https://lierabbit.cn/2018/02/23/方格移动/</id>
    <published>2018-02-23T11:00:06.000Z</published>
    <updated>2018-08-25T07:09:42.730Z</updated>
    
    <content type="html"><![CDATA[<p>在XxY的方格中，以左上角格子为起点，右下角格子为终点，每次只能向下走或者向右走，请问一共有多少种不同的走法<br>给定两个正整数int x,int y，请返回走法数目。保证x＋y小于等于12。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2,2</span><br><span class="line">返回：2</span><br></pre></td></tr></table></figure><p>思路：一共走x-1+y-1步，其中必然有y-1步向下，则C(x-1+y-1,y-1)第一个为下标，第二个为上标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    --x;</span><br><span class="line">    --y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C(x + y, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟C运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A(down, up) / A(up, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟A运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> down 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> up   上标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> down, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up; i++)</span><br><span class="line">        data *= down--;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在XxY的方格中，以左上角格子为起点，右下角格子为终点，每次只能向下走或者向右走，请问一共有多少种不同的走法&lt;br&gt;给定两个正整数int x,int y，请返回走法数目。保证x＋y小于等于12。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>寻找奇数出现II</title>
    <link href="https://lierabbit.cn/2018/02/23/%E5%AF%BB%E6%89%BE%E5%A5%87%E6%95%B0%E5%87%BA%E7%8E%B0II/"/>
    <id>https://lierabbit.cn/2018/02/23/寻找奇数出现II/</id>
    <published>2018-02-23T07:20:24.000Z</published>
    <updated>2018-08-25T07:08:34.798Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整型数组arr，其中有两个数出现了奇数次，其他的数都出现了偶数次，找到这两个数。要求时间复杂度为O(N)，额外空间复杂度为O(1)。<br>给定一个整形数组arr及它的大小n，请返回一个数组，其中两个元素为两个出现了奇数次的元素,请将他们按从小到大排列。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1,2,4,4,2,1,3,5],8</span><br><span class="line">返回：[3,5]</span><br></pre></td></tr></table></figure><p>思路：<br><img src="https://blog-1252204470.cos.ap-guangzhou.myqcloud.com/2018/02/23/%E5%AF%BB%E6%89%BE%E5%A5%87%E6%95%B0%E5%87%BA%E7%8E%B0II/1.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findOdds(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) <span class="comment">// 假设出现奇数次的两个数为a,b则，k1 = a ^ b</span></span><br><span class="line">        k1 ^= a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rightOne = k1 &amp; (~k1 + <span class="number">1</span>); <span class="comment">// 获取k1的二进制最右边第一个1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) <span class="comment">// 最后k2为a或者b</span></span><br><span class="line">        <span class="keyword">if</span> ((rightOne &amp; a) != <span class="number">0</span>) <span class="comment">// 只有和rightOne在相同位一致的数才有可能是a或b</span></span><br><span class="line">            k2 ^= a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> small = Math.min(k2, k1 ^ k2);</span><br><span class="line">    <span class="keyword">int</span> big = Math.max(k2, k1 ^ k2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    res[<span class="number">0</span>] = small;</span><br><span class="line">    res[<span class="number">1</span>] = big;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个整型数组arr，其中有两个数出现了奇数次，其他的数都出现了偶数次，找到这两个数。要求时间复杂度为O(N)，额外空间复杂度为O(1)。&lt;br&gt;给定一个整形数组arr及它的大小n，请返回一个数组，其中两个元素为两个出现了奇数次的元素,请将他们按从小到大排列。&lt;br&gt;测试
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>寻找奇数出现</title>
    <link href="https://lierabbit.cn/2018/02/23/%E5%AF%BB%E6%89%BE%E5%A5%87%E6%95%B0%E5%87%BA%E7%8E%B0/"/>
    <id>https://lierabbit.cn/2018/02/23/寻找奇数出现/</id>
    <published>2018-02-23T06:53:41.000Z</published>
    <updated>2018-08-25T07:05:37.674Z</updated>
    
    <content type="html"><![CDATA[<p>有一个整型数组A，其中只有一个数出现了奇数次，其他的数都出现了偶数次，请打印这个数。要求时间复杂度为O(N)，额外空间复杂度为O(1)。<br>给定整形数组A及它的大小n，请返回题目所求数字。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,2,1],5</span><br><span class="line">返回：3</span><br></pre></td></tr></table></figure><p>思路：由于<br>0 ^ n = n<br>n ^ n = 0<br>只要让0^数组里每个元素，最后得到的数就是只出现奇数次的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findOdd</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : A)</span><br><span class="line">        temp ^= a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一个整型数组A，其中只有一个数出现了奇数次，其他的数都出现了偶数次，请打印这个数。要求时间复杂度为O(N)，额外空间复杂度为O(1)。&lt;br&gt;给定整形数组A及它的大小n，请返回题目所求数字。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>比较</title>
    <link href="https://lierabbit.cn/2018/02/23/%E6%AF%94%E8%BE%83/"/>
    <id>https://lierabbit.cn/2018/02/23/比较/</id>
    <published>2018-02-23T06:39:41.000Z</published>
    <updated>2018-08-25T07:02:17.010Z</updated>
    
    <content type="html"><![CDATA[<p>对于两个32位整数a和b，请设计一个算法返回a和b中较大的。但是不能用任何比较判断。若两数相同，返回任意一个。<br>给定两个整数a和b，请返回较大的数。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,2</span><br><span class="line">返回：2</span><br></pre></td></tr></table></figure><p>思路：本函数规定符号位：1非负，0负<br>若a，b符号不同，返回a<em>a符号位+b</em>b符号位，防止溢出<br>若a，b符号相同，使用a-b的符号位c，即返回a<em>c+b</em>(-c)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> c = a - b;</span><br><span class="line">    <span class="keyword">int</span> as = sign(a); <span class="comment">// 1表示非负，0表示负数</span></span><br><span class="line">    <span class="keyword">int</span> bs = sign(b);</span><br><span class="line">    <span class="keyword">int</span> cs = sign(c);</span><br><span class="line">    <span class="keyword">int</span> disab = as ^ bs; <span class="comment">// ab符号不相同为1，相同为0</span></span><br><span class="line">    <span class="keyword">int</span> sameab = flip(disab); <span class="comment">// ab符号相同为1，不相同为0</span></span><br><span class="line">    <span class="keyword">int</span> returnA = disab * as + sameab * cs;</span><br><span class="line">    <span class="keyword">int</span> returnB = flip(returnA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnA * a + returnB * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取int符号位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> flip((n &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于两个32位整数a和b，请设计一个算法返回a和b中较大的。但是不能用任何比较判断。若两数相同，返回任意一个。&lt;br&gt;给定两个整数a和b，请返回较大的数。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>交换</title>
    <link href="https://lierabbit.cn/2018/02/23/%E4%BA%A4%E6%8D%A2/"/>
    <id>https://lierabbit.cn/2018/02/23/交换/</id>
    <published>2018-02-23T06:08:16.000Z</published>
    <updated>2018-08-25T06:45:14.594Z</updated>
    
    <content type="html"><![CDATA[<p>请编写一个算法，不用任何额外变量交换两个整数的值。<br>给定一个数组num，其中包含两个值，请不用任何额外变量交换这两个值，并将交换后的数组返回。<br>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1,2]</span><br><span class="line">返回：[2,1]</span><br></pre></td></tr></table></figure><p>思路：使用异或进行交换<br>例如 a = a0, b = b0<br>a = a ^ b，则a = a0 ^ b0<br>b = a ^ b，则b = a0 ^ b0 ^ b0 = a0<br>a = a ^ b，则a = a0 ^ b0 ^ a0 = b0<br>至此交换完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getSwap(<span class="keyword">int</span>[] num) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    num[<span class="number">0</span>] = num[<span class="number">0</span>] ^ num[<span class="number">1</span>];</span><br><span class="line">    num[<span class="number">1</span>] = num[<span class="number">0</span>] ^ num[<span class="number">1</span>];</span><br><span class="line">    num[<span class="number">0</span>] = num[<span class="number">0</span>] ^ num[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;请编写一个算法，不用任何额外变量交换两个整数的值。&lt;br&gt;给定一个数组num，其中包含两个值，请不用任何额外变量交换这两个值，并将交换后的数组返回。&lt;br&gt;测试样例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最大二叉子树</title>
    <link href="https://lierabbit.cn/2018/02/23/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E5%AD%90%E6%A0%91/"/>
    <id>https://lierabbit.cn/2018/02/23/最大二叉子树/</id>
    <published>2018-02-23T05:36:11.000Z</published>
    <updated>2018-08-25T06:26:47.536Z</updated>
    
    <content type="html"><![CDATA[<p>有一棵二叉树，其中所有节点的值都不一样,找到含有节点最多 的搜索二叉子树,并返回这棵子树的头节点.<br>给定二叉树的头结点root，请返回所求的头结点,若出现多个节点最多的子树，返回头结点权值最大的。</p><p>思路：以节点node为头的树中，最大的搜索二叉子树只可能来自以下两种情况:<br>1.来自node左子树上的最大搜索二叉子树是以node左孩子为头的，并且来自node右子树上的最大搜索二叉子树是以node右孩子为头的，node左子树上的最大搜索二叉子树的最大值小于node的节点值，node右子树上的最大搜索二叉子树的最小值大于node的节点值，那么以节点node为头的整棵树都是搜索二叉树。<br>2.如果不满足第1种情况，说明以节点node为头的树整体不能连成搜索二叉树。这种情况下，以node为头的树上的最大搜索二叉子树是来自node的左子树上的最大搜索二叉子树和来自node的右子树上的最大搜索二叉子树之间，节点数较多的那个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMax</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> getMax(root, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">getMax</span><span class="params">(TreeNode node, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        temp[<span class="number">0</span>] = Integer.MAX_VALUE; <span class="comment">// 最小值取最大值，这样所有的数都能比它小</span></span><br><span class="line">        temp[<span class="number">1</span>] = Integer.MIN_VALUE; <span class="comment">// 最大值取最小值，这样所有的数都能比它大</span></span><br><span class="line">        temp[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode lMaxNode = getMax(node.left, temp);</span><br><span class="line">    <span class="keyword">int</span> lMin = temp[<span class="number">0</span>]; <span class="comment">// 最小值</span></span><br><span class="line">    <span class="keyword">int</span> lMax = temp[<span class="number">1</span>]; <span class="comment">// 最大值</span></span><br><span class="line">    <span class="keyword">int</span> lNum = temp[<span class="number">2</span>]; <span class="comment">// 节点数</span></span><br><span class="line"></span><br><span class="line">    TreeNode rMaxNode = getMax(node.right, temp);</span><br><span class="line">    <span class="keyword">int</span> rMin = temp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> rMax = temp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> rNum = temp[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    temp[<span class="number">0</span>] = Math.min(lMin, node.val); <span class="comment">// 更新最小值</span></span><br><span class="line">    temp[<span class="number">1</span>] = Math.max(rMax, node.val); <span class="comment">// 更新最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lMaxNode == node.left &amp;&amp; rMaxNode == node.right &amp;&amp; lMax &lt; node.val &amp;&amp; rMin &gt; node.val) &#123;</span><br><span class="line">        temp[<span class="number">2</span>] = lNum + rNum + <span class="number">1</span>; <span class="comment">// 更新节点数</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        temp[<span class="number">2</span>] = Math.max(lNum, rNum);</span><br><span class="line">        <span class="keyword">return</span> lNum &gt; rNum ? lMaxNode : rMaxNode; <span class="comment">// 当相等的时候取右边的，因为右边的权值大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一棵二叉树，其中所有节点的值都不一样,找到含有节点最多 的搜索二叉子树,并返回这棵子树的头节点.&lt;br&gt;给定二叉树的头结点root，请返回所求的头结点,若出现多个节点最多的子树，返回头结点权值最大的。&lt;/p&gt;
&lt;p&gt;思路：以节点node为头的树中，最大的搜索二叉子树只可能
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>树上最远距离</title>
    <link href="https://lierabbit.cn/2018/02/22/%E6%A0%91%E4%B8%8A%E6%9C%80%E8%BF%9C%E8%B7%9D%E7%A6%BB/"/>
    <id>https://lierabbit.cn/2018/02/22/树上最远距离/</id>
    <published>2018-02-22T15:04:52.000Z</published>
    <updated>2018-08-24T14:30:34.072Z</updated>
    
    <content type="html"><![CDATA[<p>从二叉树的节点A出发，可以向上或者向下走，但沿途的节点只能经过一次，当到达节点B时，路径上的节点数叫作A到B的距离。对于给定的一棵二叉树，求整棵树上节点间的最大距离。<br>给定一个二叉树的头结点root，请返回最大距离。保证点数大于等于2小于等于500.</p><p>思路：一个以h为头的树上,最大距离只可能来自以下三种情况:<br>1.h的左子树上的最大距离<br>2.h的右子树上的最大距离<br>3.h左子树上离h左孩子最远的距离，加上h自身这个节点，再加h右子树上离h右孩子的最远距离，也就是两个节点分别来自h两侧子树的情况<br>三个值中最大的那个就是以h为头的整棵树上最远的距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLongest</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> find(root, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(TreeNode node, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        temp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lMax = find(node.left, temp);</span><br><span class="line">    <span class="keyword">int</span> maxFormLeft = temp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> rMax = find(node.right, temp);</span><br><span class="line">    <span class="keyword">int</span> maxFormRight = temp[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cMax = maxFormLeft + maxFormRight + <span class="number">1</span>;</span><br><span class="line">    temp[<span class="number">0</span>] = Math.max(maxFormLeft, maxFormRight) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.max(Math.max(lMax, rMax), cMax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从二叉树的节点A出发，可以向上或者向下走，但沿途的节点只能经过一次，当到达节点B时，路径上的节点数叫作A到B的距离。对于给定的一棵二叉树，求整棵树上节点间的最大距离。&lt;br&gt;给定一个二叉树的头结点root，请返回最大距离。保证点数大于等于2小于等于500.&lt;/p&gt;
&lt;p&gt;思
      
    
    </summary>
    
      <category term="直通BAT面试算法" scheme="https://lierabbit.cn/categories/%E7%9B%B4%E9%80%9ABAT%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lierabbit.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
